// <auto-generated />
using System;
using Artalex.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Artalex.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Artalex.DAL.Models.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_date");

                    b.Property<long>("AuditStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_status_id");

                    b.Property<long>("AuditTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_type_id");

                    b.Property<int>("AuditorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("auditor_user_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DisembarkationPort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("disembarkation_port");

                    b.Property<string>("EmbarkationPort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("embarkation_port");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("MasterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("master_name");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("PortAgentEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("port_agent_email");

                    b.Property<string>("PortAgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("port_agent_name");

                    b.Property<string>("PortAgentPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("port_agent_phone");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<long>("VesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_audits");

                    b.HasIndex("AuditStatusId")
                        .HasDatabaseName("ix_audits_audit_status_id");

                    b.HasIndex("AuditTypeId")
                        .HasDatabaseName("ix_audits_audit_type_id");

                    b.HasIndex("AuditorUserId")
                        .HasDatabaseName("ix_audits_auditor_user_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audits_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audits_is_deleted");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_audits_vessel_id");

                    b.ToTable("Audits", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditChapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_type_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_chapters");

                    b.HasIndex("AuditTypeId")
                        .HasDatabaseName("ix_audit_chapters_audit_type_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_chapters_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_chapters_is_deleted");

                    b.ToTable("AuditChapters", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditManagerResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_id");

                    b.Property<long>("AuditQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_question_id");

                    b.Property<DateTime>("AuditResponseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_response_date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("response_text");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_manager_responses");

                    b.HasIndex("AuditId")
                        .HasDatabaseName("ix_audit_manager_responses_audit_id");

                    b.HasIndex("AuditQuestionId")
                        .HasDatabaseName("ix_audit_manager_responses_audit_question_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_manager_responses_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_manager_responses_is_deleted");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_audit_manager_responses_manager_id");

                    b.ToTable("AuditManagerResponses", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditChapterId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_chapter_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("explanation");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ReferenceTo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference_to");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_audit_questions");

                    b.HasIndex("AuditChapterId")
                        .HasDatabaseName("ix_audit_questions_audit_chapter_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_questions_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_questions_is_deleted");

                    b.ToTable("AuditQuestions", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditQuestionPotentialGround", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_question_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_audit_question_potential_grounds");

                    b.HasIndex("AuditQuestionId")
                        .HasDatabaseName("ix_audit_question_potential_grounds_audit_question_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_question_potential_grounds_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_question_potential_grounds_is_deleted");

                    b.ToTable("AuditQuestionPotentialGrounds", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_id");

                    b.Property<long>("AuditQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_question_id");

                    b.Property<long>("AuditResponseAssignedToId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_response_assigned_to_id");

                    b.Property<DateTime>("AuditResponseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_response_date");

                    b.Property<long?>("AuditResponsePotentialGroundId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("audit_response_potential_ground_id");

                    b.Property<long?>("AuditResponseQuestionPotentialGroundId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_response_question_potential_ground_id");

                    b.Property<long>("AuditResponseStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_response_status_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("response_text");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_responses");

                    b.HasIndex("AuditId")
                        .HasDatabaseName("ix_audit_responses_audit_id");

                    b.HasIndex("AuditQuestionId")
                        .HasDatabaseName("ix_audit_responses_audit_question_id");

                    b.HasIndex("AuditResponseAssignedToId")
                        .HasDatabaseName("ix_audit_responses_audit_response_assigned_to_id");

                    b.HasIndex("AuditResponsePotentialGroundId")
                        .HasDatabaseName("ix_audit_responses_audit_response_potential_ground_id");

                    b.HasIndex("AuditResponseQuestionPotentialGroundId")
                        .HasDatabaseName("ix_audit_responses_audit_response_question_potential_ground_id");

                    b.HasIndex("AuditResponseStatusId")
                        .HasDatabaseName("ix_audit_responses_audit_response_status_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_responses_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_responses_is_deleted");

                    b.ToTable("AuditResponses", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponseAssignedTo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_audit_response_assigned_tos");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_response_assigned_tos_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_response_assigned_tos_is_deleted");

                    b.ToTable("AuditResponseAssignedTos", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponsePhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuditResponseId")
                        .HasColumnType("bigint")
                        .HasColumnName("audit_response_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_response_photos");

                    b.HasIndex("AuditResponseId")
                        .HasDatabaseName("ix_audit_response_photos_audit_response_id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_response_photos_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_response_photos_is_deleted");

                    b.ToTable("AuditResponsePhotos", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponsePotentialGround", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_audit_response_potential_grounds");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_response_potential_grounds_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_response_potential_grounds_is_deleted");

                    b.ToTable("AuditResponsePotentialGrounds", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponseStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<bool>("SetByAuditor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("set_by_auditor");

                    b.Property<bool>("SetByManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("set_by_manager");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status_name");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_response_status");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_response_status_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_response_status_is_deleted");

                    b.ToTable("AuditResponseStatus", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status_name");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_status");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_status_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_status_is_deleted");

                    b.ToTable("AuditStatus", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_types");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_audit_types_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_audit_types_is_deleted");

                    b.ToTable("AuditTypes", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.Config", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_configs");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_configs_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_configs_is_deleted");

                    b.ToTable("Configs", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.MailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("failed_count");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_mail_queues");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_mail_queues_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_mail_queues_is_deleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_mail_queues_user_id");

                    b.ToTable("MailQueues", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text")
                        .HasColumnName("connection_string");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenancy_name");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("additional_info");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Messenger")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("messenger");

                    b.Property<string>("MessengerPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("messenger_phone_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("surname");

                    b.Property<int?>("TenantId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_users_tenant_id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.UserFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_files");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_user_files_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_user_files_is_deleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_files_user_id");

                    b.ToTable("UserFiles", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.Vessel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("IMO")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("imo");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastAuditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_audit_date");

                    b.Property<string>("LastAuditorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_auditor_name");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextAuditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_audit_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.HasKey("Id")
                        .HasName("pk_vessels");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_vessels_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_vessels_is_deleted");

                    b.ToTable("Vessels", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.VesselFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("TenantName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tenant_name");

                    b.Property<long>("VesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_vessel_files");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_vessel_files_created_date");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("ix_vessel_files_is_deleted");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_vessel_files_vessel_id");

                    b.ToTable("VesselFiles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<int>");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Artalex.DAL.Models.Audit", b =>
                {
                    b.HasOne("Artalex.DAL.Models.AuditStatus", "AuditStatus")
                        .WithMany()
                        .HasForeignKey("AuditStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audits_audit_status_audit_status_id");

                    b.HasOne("Artalex.DAL.Models.AuditType", "AuditType")
                        .WithMany()
                        .HasForeignKey("AuditTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audits_audit_types_audit_type_id");

                    b.HasOne("Artalex.DAL.Models.User", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audits_asp_net_users_auditor_id");

                    b.HasOne("Artalex.DAL.Models.Vessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audits_vessels_vessel_id");

                    b.Navigation("AuditStatus");

                    b.Navigation("AuditType");

                    b.Navigation("Auditor");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditChapter", b =>
                {
                    b.HasOne("Artalex.DAL.Models.AuditType", "AuditType")
                        .WithMany("Chapters")
                        .HasForeignKey("AuditTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_chapters_audit_types_audit_type_id");

                    b.Navigation("AuditType");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditManagerResponse", b =>
                {
                    b.HasOne("Artalex.DAL.Models.Audit", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_manager_responses_audits_audit_id");

                    b.HasOne("Artalex.DAL.Models.AuditQuestion", "AuditQuestion")
                        .WithMany("AuditManagerResponses")
                        .HasForeignKey("AuditQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_manager_responses_audit_questions_audit_question_id");

                    b.HasOne("Artalex.DAL.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_manager_responses_asp_net_users_manager_id");

                    b.Navigation("Audit");

                    b.Navigation("AuditQuestion");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditQuestion", b =>
                {
                    b.HasOne("Artalex.DAL.Models.AuditChapter", "AuditChapter")
                        .WithMany("Questions")
                        .HasForeignKey("AuditChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_questions_audit_chapters_audit_chapter_id");

                    b.Navigation("AuditChapter");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditQuestionPotentialGround", b =>
                {
                    b.HasOne("Artalex.DAL.Models.AuditQuestion", "AuditQuestion")
                        .WithMany("PotentialGrounds")
                        .HasForeignKey("AuditQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_question_potential_grounds_audit_questions_audit_question");

                    b.Navigation("AuditQuestion");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponse", b =>
                {
                    b.HasOne("Artalex.DAL.Models.Audit", "Audit")
                        .WithMany("Responses")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_responses_audits_audit_id");

                    b.HasOne("Artalex.DAL.Models.AuditQuestion", "AuditQuestion")
                        .WithMany("Responses")
                        .HasForeignKey("AuditQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_responses_audit_questions_audit_question_id");

                    b.HasOne("Artalex.DAL.Models.AuditResponseAssignedTo", "AuditResponseAssignedTo")
                        .WithMany()
                        .HasForeignKey("AuditResponseAssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_responses_audit_response_assigned_tos_audit_response_assi");

                    b.HasOne("Artalex.DAL.Models.AuditResponsePotentialGround", "AuditResponsePotentialGround")
                        .WithMany()
                        .HasForeignKey("AuditResponsePotentialGroundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_responses_audit_response_potential_grounds_audit_respo");

                    b.HasOne("Artalex.DAL.Models.AuditQuestionPotentialGround", "AuditQuestionPotentialGround")
                        .WithMany()
                        .HasForeignKey("AuditResponseQuestionPotentialGroundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_audit_responses_audit_question_potential_grounds_audit_question");

                    b.HasOne("Artalex.DAL.Models.AuditResponseStatus", "AuditResponseStatus")
                        .WithMany()
                        .HasForeignKey("AuditResponseStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_responses_audit_response_status_audit_response_status_");

                    b.Navigation("Audit");

                    b.Navigation("AuditQuestion");

                    b.Navigation("AuditQuestionPotentialGround");

                    b.Navigation("AuditResponseAssignedTo");

                    b.Navigation("AuditResponsePotentialGround");

                    b.Navigation("AuditResponseStatus");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponsePhoto", b =>
                {
                    b.HasOne("Artalex.DAL.Models.AuditResponse", "AuditResponse")
                        .WithMany("Photos")
                        .HasForeignKey("AuditResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_audit_response_photos_audit_responses_audit_response_id");

                    b.Navigation("AuditResponse");
                });

            modelBuilder.Entity("Artalex.DAL.Models.MailQueue", b =>
                {
                    b.HasOne("Artalex.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mail_queues_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artalex.DAL.Models.User", b =>
                {
                    b.HasOne("Artalex.DAL.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Artalex.DAL.Models.UserFile", b =>
                {
                    b.HasOne("Artalex.DAL.Models.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_files_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artalex.DAL.Models.VesselFile", b =>
                {
                    b.HasOne("Artalex.DAL.Models.Vessel", "Vessel")
                        .WithMany("Files")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vessel_files_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Artalex.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Artalex.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_asp_net_roles_role_id");

                    b.HasOne("Artalex.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Artalex.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Artalex.DAL.Models.Role", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithOne()
                        .HasForeignKey("Artalex.DAL.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_asp_net_roles_id");
                });

            modelBuilder.Entity("Artalex.DAL.Models.Audit", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditChapter", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditQuestion", b =>
                {
                    b.Navigation("AuditManagerResponses");

                    b.Navigation("PotentialGrounds");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditResponse", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Artalex.DAL.Models.AuditType", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Artalex.DAL.Models.Tenant", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Artalex.DAL.Models.User", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Artalex.DAL.Models.Vessel", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
